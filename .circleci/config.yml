---
version: 2.1

parameters:
  python-version:
    type: string
    default: "3.9"
  python-module:
    type: string
    default: "csv_detective"
  publish-branch:
    type: string
    default: "master"
  cache-prefix:
    type: string
    default: "py-cache"

jobs:
  install:
    docker:
      - image: cimg/python:<< pipeline.parameters.python-version >>
    steps:
      - checkout
      - run:
          name: Get the base reference branch
          command: export BASE_BRANCH=$(base_branch)
      - restore_cache:
          keys:
            - << pipeline.parameters.cache-prefix >>-{{ arch }}-{{ checksum "pyproject.toml" }}
      - run:
          name: Install python dependencies
          command: |
            virtualenv venv
            source venv/bin/activate
            pip install -e .[dev]
      - save_cache:
          key: << pipeline.parameters.cache-prefix >>-{{ arch }}-{{ checksum "pyproject.toml" }}
          paths:
            - venv
      - persist_to_workspace:
          root: .
          paths:
            - .

  lint:
    docker:
      - image: cimg/python:<< pipeline.parameters.python-version >>
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Lint and format code and sort imports
          # ruff check . : check linting and imports sorting without fixing (to fix, use --fix)
          # ruff format --check . : check code formatting without fixing (to fix, remove --check)
          command: |
            source venv/bin/activate
            ruff check .
            ruff format --check .

  tests:
    docker:
      - image: cimg/python:<< pipeline.parameters.python-version >>
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Run tests
          command: |
            source venv/bin/activate
            pytest -s tests/ --junitxml=reports/python/tests.xml -p no:sugar --color=yes
      - store_test_results:
          path: reports/python

  build:
    docker:
      - image: cimg/python:<< pipeline.parameters.python-version >>
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Build a distributable package
          command: |
            source venv/bin/activate
            pip install twine
            pip install build
            # Build a wheel release
            if [[ $CIRCLE_TAG ]]; then
                # This is a tagged release, version should be handled upstream
                python -m build --wheel
            else
                pip install toml
                python update_version.py
                python -m build --wheel
            fi
            twine check dist/*
      - store_artifacts:
          path: dist
      - persist_to_workspace:
          root: .
          paths:
            - .

  publish:
    docker:
      - image: cimg/python:<< pipeline.parameters.python-version >>
    steps:
      - attach_workspace:
          at: .
      - deploy:
          name: Publish on PyPI
          command: |
            source venv/bin/activate
            pip install twine
            twine upload --username "${PYPI_USERNAME}" --password "${PYPI_PASSWORD}" dist/*.whl

workflows:
  version: 2
  build:
    jobs:
      - install:
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
      - lint:
          requires:
            - install
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
      - tests:
          requires:
            - install
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
      - build:
          requires:
            - tests
            - lint
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
      - publish:
          requires:
            - build
          filters:
            branches:
              only:
                - << pipeline.parameters.publish-branch >>
                - /[0-9]+(\.[0-9]+)+/
                - /rc[0-9]+/
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
          context: org-global
